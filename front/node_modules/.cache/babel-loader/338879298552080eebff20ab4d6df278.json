{"ast":null,"code":"var _jsxFileName = \"/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/game/game.component.jsx\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Ball = {\n  position_x: 50,\n  position_y: 50,\n  vel_x: 10,\n  vel_y: 10\n};\nlet canvas = document.getElementById('myCanvas');\nlet ctx = canvas.getContext('2d');\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, width, height); // ctx.beginPath();\n// function useKeyPress(targetKey) {\n//     // State for keeping track of whether key is pressed\n//     const [keyPressed, setKeyPressed] = useState(false);\n//     // If pressed key is our target key then set to true\n//     function downHandler({ key }) {\n//       if (key === targetKey) {\n//         setKeyPressed(true);\n//       }\n//     }\n//     // If released key is our target key then set to false\n//     const upHandler = ({ key }) => {\n//       if (key === targetKey) {\n//         setKeyPressed(false);\n//       }\n//     };\n//     // Add event listeners\n//     useEffect(() => {\n//       window.addEventListener(\"keydown\", downHandler);\n//       window.addEventListener(\"keyup\", upHandler);\n//       // Remove event listeners on cleanup\n//       return () => {\n//         window.removeEventListener(\"keydown\", downHandler);\n//         window.removeEventListener(\"keyup\", upHandler);\n//       };\n//     }, []); // Empty array ensures that effect is only run on mount and unmount\n//     return keyPressed;\n//   }\n\nexport const Game = () => {\n  //   const [score_1, setScore_1] = useState(0);\n  //   const [score_2, setScore_2] = useState(0);\n  //   const [pos_1, setPos_1] = useState(50);\n  //   const [pos_2, setPos_2] = useState(20);\n  //   const [width, setWidth] = useState(800);\n  //   const [height, setHeight] = useState(600);\n  //   const [ball_x, setBall_x] = useState(50);\n  //   const [ball_y, setBall_y] = useState(50);\n  //   const [ball_v_x, setBall_v_x] = useState(0.05); \n  //   const [ball_v_y, setBall_v_y] = useState(0.05); \n  //   const sPress = useKeyPress(\"s\");\n  //   const wPress = useKeyPress(\"w\");\n  //   // constructor()\n  //   // {\n  //   //     super();\n  //   //     this.state = {\n  //   //       score_player_1: 0,\n  //   //       score_player_2: 0,\n  //   //       player_1_position: 50,\n  //   //       player_2_position: 0\n  //   //     }\n  //   // }\n  //   const drawBall = (context, x, y) => {\n  //       if (ball_x + 10 >= width)\n  //           setBall_v_x(-0.05);\n  //       else if (ball_x  <= 0)\n  //           setBall_v_x(0.05);\n  //       if (ball_y >= height)\n  //           setBall_v_y(-0.05);\n  //       else if (ball_y <= 0)\n  //           setBall_v_y(0.05);\n  //       setBall_x(ball_x + ball_v_x);\n  //       setBall_y(ball_y + ball_v_y);\n  //       context.fillStyle = \"white\";\n  //       context.fillRect(ball_x, ball_y, 20, 20);\n  //   }\n  //   const drawPeddle = (context, x, y) => {\n  //       context.fillStyle = \"white\";\n  //       context.fillRect(x, y, 20,  80);\n  //   }\n  //   const drawLine = (context, width, height) => {\n  //       context.strokeStyle = \"white\";\n  //       context.setLineDash([15, 5]);\n  //       context.moveTo(width / 2, 0);\n  //       context.lineTo(width / 2, height + 5);\n  //       context.stroke();  \n  //   }\n  //   const drawScore = (context, width, height) => {\n  //       context.font = \"100px Mina\";\n  //       context.fillStyle = \"white\";\n  //       context.fillText(score_1,  width / 4 , height / 4);\n  //       context.fillText(score_2,  width * 3 / 4 , height / 4);\n  //   }\n  //   const draw = (context, width, height, player_1_position) => {\n  //   context.fillStyle = \"black\";\n  //   context.fillRect(0, 0, width,  height);\n  //   context.beginPath();\n  //   drawBall(context, 200, 200);\n  //   drawLine(context, width, height);\n  //   drawPeddle(context, 10, player_1_position);\n  //   drawPeddle(context, width - 30, 150);\n  //   drawScore(context, width, height);\n  // };\n  //   // componentWillMount() {\n  //   //     window.addEventListener('keydown', this.handleKeyboardInput.bind(this));\n  //   // }  \n  //   // handleKeyboardInput = (e) => {\n  //   //     const code = e.keyCode ? e.keyCode : e.which;\n  //   //     if (code === 38) { //up key\n  //   //         this.setState({ keyboardInput: {'Y', -1 }});\n  //   //     }\n  //   // }\n  //   const canvasRef =  useRef();\n  //   useEffect(() => {\n  //       if (sPress)\n  //           setPos_1(pos_1 + 0.1);\n  //           if (pos_1 > height- 80)\n  //               setPos_1(height - 80);\n  //       if (wPress)\n  //           setPos_1(pos_1 - 0.1);\n  //           if (pos_1 < 0)\n  //               setPos_1(0);\n  //       const context = canvasRef.current.getContext(\"2d\");\n  //       draw(context, width, height, pos_1);\n  //     }, [sPress, wPress, pos_1, draw, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        ref: ctx,\n        width: 800,\n        height: 600,\n        style: {\n          border: '2px solid #000',\n          marginTop: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 13\n  }, this);\n};\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/game/game.component.jsx"],"names":["useState","useEffect","useRef","Ball","position_x","position_y","vel_x","vel_y","canvas","document","getElementById","ctx","getContext","fillStyle","fillRect","width","height","Game","textAlign","border","marginTop"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAGA,IAAIC,IAAI,GAAG;AACPC,EAAAA,UAAU,EAAE,EADL;AAEPC,EAAAA,UAAU,EAAE,EAFL;AAGPC,EAAAA,KAAK,EAAE,EAHA;AAIPC,EAAAA,KAAK,EAAE;AAJA,CAAX;AAMA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAb;AACA,IAAIC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AAEAD,GAAG,CAACE,SAAJ,GAAgB,OAAhB;AACAF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,KAAnB,EAA2BC,MAA3B,E,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGM,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AACR,MAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN,OADC;AAAA,6BAIR;AACE,QAAA,EAAE,EAAC,QADL;AAEE,QAAA,GAAG,EAAEP,GAFP;AAGE,QAAA,KAAK,EAAE,GAHT;AAIE,QAAA,MAAM,EAAE,GAJV;AAKE,QAAA,KAAK,EAAE;AACLQ,UAAAA,MAAM,EAAE,gBADH;AAELC,UAAAA,SAAS,EAAE;AAFN;AALT;AAAA;AAAA;AAAA;AAAA;AAJQ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAvHE;KAAMH,I","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\n\nvar Ball = {\n    position_x: 50,\n    position_y: 50,\n    vel_x: 10,\n    vel_y: 10\n}\nlet canvas = document.getElementById('myCanvas');\nlet ctx = canvas.getContext('2d');\n\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, width,  height);\n// ctx.beginPath();\n\n// function useKeyPress(targetKey) {\n//     // State for keeping track of whether key is pressed\n//     const [keyPressed, setKeyPressed] = useState(false);\n//     // If pressed key is our target key then set to true\n//     function downHandler({ key }) {\n//       if (key === targetKey) {\n//         setKeyPressed(true);\n//       }\n//     }\n//     // If released key is our target key then set to false\n//     const upHandler = ({ key }) => {\n//       if (key === targetKey) {\n//         setKeyPressed(false);\n//       }\n//     };\n//     // Add event listeners\n//     useEffect(() => {\n//       window.addEventListener(\"keydown\", downHandler);\n//       window.addEventListener(\"keyup\", upHandler);\n//       // Remove event listeners on cleanup\n//       return () => {\n//         window.removeEventListener(\"keydown\", downHandler);\n//         window.removeEventListener(\"keyup\", upHandler);\n//       };\n//     }, []); // Empty array ensures that effect is only run on mount and unmount\n//     return keyPressed;\n//   }\n\nexport const Game = () => {\n\n  //   const [score_1, setScore_1] = useState(0);\n  //   const [score_2, setScore_2] = useState(0);\n  //   const [pos_1, setPos_1] = useState(50);\n  //   const [pos_2, setPos_2] = useState(20);\n  //   const [width, setWidth] = useState(800);\n  //   const [height, setHeight] = useState(600);\n  //   const [ball_x, setBall_x] = useState(50);\n  //   const [ball_y, setBall_y] = useState(50);\n  //   const [ball_v_x, setBall_v_x] = useState(0.05); \n  //   const [ball_v_y, setBall_v_y] = useState(0.05); \n  //   const sPress = useKeyPress(\"s\");\n  //   const wPress = useKeyPress(\"w\");\n  //   // constructor()\n  //   // {\n  //   //     super();\n  //   //     this.state = {\n  //   //       score_player_1: 0,\n  //   //       score_player_2: 0,\n  //   //       player_1_position: 50,\n  //   //       player_2_position: 0\n  //   //     }\n\n  //   // }\n\n  //   const drawBall = (context, x, y) => {\n  //       if (ball_x + 10 >= width)\n  //           setBall_v_x(-0.05);\n  //       else if (ball_x  <= 0)\n  //           setBall_v_x(0.05);\n  //       if (ball_y >= height)\n  //           setBall_v_y(-0.05);\n  //       else if (ball_y <= 0)\n  //           setBall_v_y(0.05);\n  //       setBall_x(ball_x + ball_v_x);\n  //       setBall_y(ball_y + ball_v_y);\n  //       context.fillStyle = \"white\";\n  //       context.fillRect(ball_x, ball_y, 20, 20);\n  //   }\n  //   const drawPeddle = (context, x, y) => {\n  //       context.fillStyle = \"white\";\n  //       context.fillRect(x, y, 20,  80);\n  //   }\n    \n  //   const drawLine = (context, width, height) => {\n    \n  //       context.strokeStyle = \"white\";\n  //       context.setLineDash([15, 5]);\n  //       context.moveTo(width / 2, 0);\n  //       context.lineTo(width / 2, height + 5);\n  //       context.stroke();  \n  //   }\n    \n  //   const drawScore = (context, width, height) => {\n  //       context.font = \"100px Mina\";\n  //       context.fillStyle = \"white\";\n  //       context.fillText(score_1,  width / 4 , height / 4);\n  //       context.fillText(score_2,  width * 3 / 4 , height / 4);\n  //   }\n\n  //   const draw = (context, width, height, player_1_position) => {\n  //   context.fillStyle = \"black\";\n  //   context.fillRect(0, 0, width,  height);\n  //   context.beginPath();\n  //   drawBall(context, 200, 200);\n  //   drawLine(context, width, height);\n  //   drawPeddle(context, 10, player_1_position);\n  //   drawPeddle(context, width - 30, 150);\n  //   drawScore(context, width, height);\n\n  // };\n\n  //   // componentWillMount() {\n  //   //     window.addEventListener('keydown', this.handleKeyboardInput.bind(this));\n  //   // }  \n  //   // handleKeyboardInput = (e) => {\n  //   //     const code = e.keyCode ? e.keyCode : e.which;\n\n  //   //     if (code === 38) { //up key\n  //   //         this.setState({ keyboardInput: {'Y', -1 }});\n  //   //     }\n  //   // }\n  //   const canvasRef =  useRef();\n  //   useEffect(() => {\n  //       if (sPress)\n  //           setPos_1(pos_1 + 0.1);\n  //           if (pos_1 > height- 80)\n  //               setPos_1(height - 80);\n  //       if (wPress)\n  //           setPos_1(pos_1 - 0.1);\n  //           if (pos_1 < 0)\n  //               setPos_1(0);\n  //       const context = canvasRef.current.getContext(\"2d\");\n  //       draw(context, width, height, pos_1);\n  //     }, [sPress, wPress, pos_1, draw, width, height]);\n\n\n        return(\n            <div className='game'>\n                <h1>Game</h1>\n                {/* <Canvas draw={this.draw} height={500} width={900} player_1_position/> */}\n                <div\n        style={{\n          textAlign: 'center',\n        }}>\n        <canvas\n          id=\"canvas\"\n          ref={ctx}\n          width={800}\n          height={600}\n          style={{\n            border: '2px solid #000',\n            marginTop: 10,\n          }}\n        ></canvas>\n      </div>\n            </div>\n        );\n    }\n\n"]},"metadata":{},"sourceType":"module"}