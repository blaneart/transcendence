{"ast":null,"code":"class Vec {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  get len() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  set len(value) {\n    const fact = value / this.len;\n    this.x *= fact;\n    this.y *= fact;\n  }\n\n}\n\nclass Rect {\n  constructor(w, h) {\n    this.pos = new Vec();\n    this.size = new Vec(w, h);\n  }\n\n  get left() {\n    return this.pos.x;\n  }\n\n  get right() {\n    return this.pos.x + this.size.x;\n  }\n\n  get top() {\n    return this.pos.y;\n  }\n\n  get bottom() {\n    return this.pos.y + this.size.y;\n  }\n\n}\n\nclass Ball extends Rect {\n  constructor() {\n    super(10, 10);\n    this.vel = new Vec();\n  }\n\n}\n\nclass Player extends Rect {\n  constructor() {\n    super(20, 100);\n    this.score = 0;\n  }\n\n}\n\nclass Pong {\n  constructor(canvas) {\n    this._canvas = canvas;\n    this._context = this._canvas.getContext('2d');\n    this.ball = new Ball();\n    this.ball.pos.x = 100;\n    this.ball.pos.y = 100;\n    this.ball.vel.x = 400;\n    this.ball.vel.y = 400;\n    this.animation;\n    this.players = [new Player(), new Player()];\n    this.players[0].pos.x = 40;\n    this.players[1].pos.x = this._canvas.width - 40;\n    this.players[0].pos.y = 100;\n    let lastTime;\n\n    const callback = millis => {\n      if (lastTime) {\n        this.update((millis - lastTime) / 1000);\n      }\n\n      lastTime = millis;\n      this.animation = requestAnimationFrame(callback);\n    };\n\n    callback();\n  }\n\n  collide(player, ball) {\n    if (player.left < ball.right && player.right > ball.left && player.top < ball.bottom && player.bottom > ball.top) {\n      ball.vel.x = -ball.vel.x;\n      ball.vel.y += 300 * (Math.random() - .5);\n      ball.vel.len *= 1.05;\n    }\n  }\n\n  reset() {\n    this.ball.pos.x = this._canvas.width / 2;\n    this.ball.pos.y = this._canvas.height / 2;\n    this.ball.vel.x = 0;\n    this.ball.vel.y = 0;\n  }\n\n  start() {\n    if (this.ball.vel.x === 0 && this.ball.vel.y === 0) {\n      this.ball.vel.x = 300 * (Math.random() > .5 ? 1 : -1);\n      this.ball.vel.y = 300 * (Math.random() * 2 - 1);\n      this.ball.vel.len = 400;\n    }\n  }\n\n  draw() {\n    this._context.fillStyle = \"black\";\n\n    this._context.fillRect(0, 0, this._canvas.width, this._canvas.height);\n\n    this._context.fillStyle = 'white';\n\n    this._context.beginPath();\n\n    this._context.strokeStyle = \"white\";\n\n    this._context.setLineDash([5, 5]);\n\n    this._context.moveTo(this._canvas.width / 2, 0);\n\n    this._context.lineTo(this._canvas.width / 2, this._canvas.height);\n\n    this._context.stroke();\n\n    this._context.fillRect(this.ball.pos.x, this.ball.pos.y, this.ball.size.x, this.ball.size.y);\n\n    this.players.forEach(player => this.drawRect(player));\n    this.players.forEach((player, index) => this.drawScore(player.score, index));\n  }\n\n  drawScore(scores, index) {\n    const align = this._canvas.width / 3;\n    this._context.fillStyle = \"white\";\n    this._context.font = '50px Anton';\n\n    this._context.fillText(scores, align * (index + 1), 100);\n  }\n\n  drawRect(rect) {\n    this._context.fillStyle = \"white\";\n\n    this._context.fillRect(rect.pos.x, rect.pos.y, rect.size.x, rect.size.y);\n  }\n\n  update(dt) {\n    this.ball.pos.x += this.ball.vel.x * dt;\n    this.ball.pos.y += this.ball.vel.y * dt;\n\n    if (this.ball.left < 0 || this.ball.right > this._canvas.width) {\n      let playerId = this.ball.vel.x < 0 | 0;\n      this.players[playerId].score++;\n      this.reset();\n    }\n\n    if (this.ball.top < 0 || this.ball.bottom > this._canvas.height) {\n      this.ball.vel.y = -this.ball.vel.y;\n    }\n\n    console.log('ell'); // this.players[1].pos.y = this.ball.pos.y;\n\n    this.players.forEach(player => this.collide(player, this.ball));\n    this.draw();\n  }\n\n} // const canvas = document.getElementById('pong');\n// const context = canvas.getContext('2d');\n// const pong = new Pong(canvas);\n\n\nexport default Pong;","map":{"version":3,"sources":["/Users/art/Desktop/transcendence/transcendence/transcendence/src/game/game.js"],"names":["Vec","constructor","x","y","len","Math","sqrt","value","fact","Rect","w","h","pos","size","left","right","top","bottom","Ball","vel","Player","score","Pong","canvas","_canvas","_context","getContext","ball","animation","players","width","lastTime","callback","millis","update","requestAnimationFrame","collide","player","random","reset","height","start","draw","fillStyle","fillRect","beginPath","strokeStyle","setLineDash","moveTo","lineTo","stroke","forEach","drawRect","index","drawScore","scores","align","font","fillText","rect","dt","playerId","console","log"],"mappings":"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","sourcesContent":["class Vec {\n  constructor(x = 0, y = 0)\n  {\n    this.x = x;\n    this.y = y;\n  }\n  get len()\n  {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  set len(value)\n  {\n    const fact = value / this.len;\n    this.x *= fact;\n    this.y *= fact;\n  }\n}\n\nclass Rect {\n  constructor(w,h)\n  {\n    this.pos = new Vec();\n    this.size = new Vec(w, h);\n  }\n  get left()\n  {\n    return this.pos.x;\n  }\n  get right()\n  {\n    return this.pos.x + this.size.x;\n  }\n  get top()\n  {\n    return this.pos.y;\n  }\n  get bottom()\n  {\n    return this.pos.y + this.size.y;\n  }\n}\n\nclass Ball extends Rect {\n  constructor()\n  {\n    super(10,10);\n    this.vel = new Vec();\n  }\n}\n\nclass Player extends Rect {\n  constructor()\n  {\n    super(20,100);\n    this.score = 0;\n  }\n}\n\n\n\nclass Pong {\n  constructor(canvas)\n  {\n    this._canvas = canvas;\n    this._context = this._canvas.getContext('2d');\n    this.ball = new Ball;\n    this.ball.pos.x = 100;\n    this.ball.pos.y = 100;\n    this.ball.vel.x = 400;\n    this.ball.vel.y = 400;\n    this.animation;\n    this.players = [\n      new Player,\n      new Player,\n    ]\n\n    this.players[0].pos.x = 40;\n    this.players[1].pos.x = this._canvas.width - 40;\n    this.players[0].pos.y = 100;\n    let lastTime;\n\n    const callback = (millis) => {\n      if (lastTime) {\n        this.update((millis - lastTime) / 1000);\n      }\n      lastTime = millis;\n      this.animation = requestAnimationFrame(callback);\n  };\n    callback();\n  }\n  collide(player, ball)\n  {\n    if (player.left < ball.right && player.right > ball.left &&\n        player.top < ball.bottom && player.bottom > ball.top)\n        {\n          ball.vel.x = -ball.vel.x;\n          ball.vel.y += 300 * (Math.random() - .5); \n          ball.vel.len *= 1.05;\n        }\n  }\n  \n  reset()\n  {\n    this.ball.pos.x = this._canvas.width / 2;\n    this.ball.pos.y = this._canvas.height / 2;\n    this.ball.vel.x = 0;\n    this.ball.vel.y = 0;\n  }\n  start()\n  {\n    if (this.ball.vel.x === 0 && this.ball.vel.y === 0) {\n      this.ball.vel.x = 300 * (Math.random() > .5 ? 1 : -1);\n      this.ball.vel.y = 300 * (Math.random() * 2  -1);\n      this.ball.vel.len = 400;\n\n    }\n  }\n  draw()\n  {\n    this._context.fillStyle = \"black\";\n    this._context.fillRect(0,0, \n                            this._canvas.width, this._canvas.height);\n    this._context.fillStyle = 'white';\n    this._context.beginPath();\n    this._context.strokeStyle = \"white\";\n    this._context.setLineDash([5, 5]);\n    this._context.moveTo(this._canvas.width / 2, 0);\n    this._context.lineTo(this._canvas.width / 2, this._canvas.height);\n    this._context.stroke();\n    \n    this._context.fillRect(this.ball.pos.x, this.ball.pos.y, this.ball.size.x, this.ball.size.y);\n    this.players.forEach(player => this.drawRect(player));\n    this.players.forEach((player, index) => this.drawScore(player.score, index));\n  }\n  drawScore(scores, index)\n  {\n    const align = this._canvas.width / 3;\n\n    this._context.fillStyle = \"white\"; \n    this._context.font = '50px Anton';\n    this._context.fillText(scores, align * (index + 1), 100);\n  }\n  drawRect(rect)\n  {\n    this._context.fillStyle = \"white\";\n    this._context.fillRect(rect.pos.x, rect.pos.y, \n                            rect.size.x, rect.size.y);\n\n  }\n  update(dt) {\n    this.ball.pos.x += this.ball.vel.x * dt;\n    this.ball.pos.y += this.ball.vel.y * dt;\n  \n    if (this.ball.left < 0 || this.ball.right > this._canvas.width)\n    {\n      let playerId = this.ball.vel.x < 0 | 0;\n      this.players[playerId].score++;\n      this.reset();\n    }\n    if (this.ball.top < 0 || this.ball.bottom > this._canvas.height)\n    {\n      this.ball.vel.y = -this.ball.vel.y;\n    } \n    console.log('ell');\n    // this.players[1].pos.y = this.ball.pos.y;\n    this.players.forEach(player => this.collide(player, this.ball));\n    this.draw(); \n  }\n}\n\n// const canvas = document.getElementById('pong');\n// const context = canvas.getContext('2d');\n// const pong = new Pong(canvas);\n\n\n\n\n\n\nexport default Pong;"]},"metadata":{},"sourceType":"module"}