{"ast":null,"code":"var _jsxFileName = \"/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/canvas/canvas.component.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react'; // import { useRef } from 'react/cjs/react.production.min';\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useKeyPress(targetKey) {\n  _s();\n\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState < boolean > false; // If pressed key is our target key then set to true\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\n_s(useKeyPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const Canvas = ({\n  draw,\n  width,\n  height\n}) => {\n  _s2();\n\n  const canvasRef = React.useRef(); // const context = React.useState<CanvasRenderingContext2D | null>(null);\n\n  React.useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    draw(context, width, height);\n  });\n  sadPress = useKeyPress(\"s\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        border: '2px solid #000',\n        marginTop: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Canvas, \"YXQLGrX0upSJG89Sdvsy1pjJ90A=\", false, function () {\n  return [useKeyPress];\n});\n\n_c = Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/canvas/canvas.component.jsx"],"names":["React","useState","useEffect","useKeyPress","targetKey","keyPressed","setKeyPressed","boolean","downHandler","key","upHandler","window","addEventListener","removeEventListener","Canvas","draw","width","height","canvasRef","useRef","context","current","getContext","sadPress","textAlign","border","marginTop"],"mappings":";;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AACA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAAA;;AAC5B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,GAACM,OAAT,GAAkB,KAAtD,CAF4B,CAG5B;;AACA,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAA8B;AAC5B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAR2B,CAS5B;;;AACA,QAAMI,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AAC7B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD,CAV4B,CAe5B;;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC,EAFc,CAGd;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT,CAhB4B,CAwBpB;;AACR,SAAOL,UAAP;AACD;;GA1BMF,W;;AA4BT,OAAO,MAAMW,MAAM,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAD,KAA2B;AAAA;;AAC7C,QAAMC,SAAS,GAAIlB,KAAK,CAACmB,MAAN,EAAnB,CAD6C,CAE7C;;AACAnB,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClB,UAAMkB,OAAO,GAAGF,SAAS,CAACG,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAP,IAAAA,IAAI,CAACK,OAAD,EAAUJ,KAAV,EAAiBC,MAAjB,CAAJ;AACD,GAHH;AAIAM,EAAAA,QAAQ,GAAGpB,WAAW,CAAC,GAAD,CAAtB;AACA,sBACE;AACE,IAAA,KAAK,EAAE;AACLqB,MAAAA,SAAS,EAAE;AADN,KADT;AAAA,2BAIE;AACE,MAAA,EAAE,EAAC,QADL;AAEE,MAAA,GAAG,EAAEN,SAFP;AAGE,MAAA,KAAK,EAAEF,KAHT;AAIE,MAAA,MAAM,EAAEC,MAJV;AAKE,MAAA,KAAK,EAAE;AACLQ,QAAAA,MAAM,EAAE,gBADH;AAELC,QAAAA,SAAS,EAAE;AAFN;AALT;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBH,CAzBM;;IAAMZ,M;UAOEX,W;;;KAPFW,M","sourcesContent":["\nimport * as React from 'react';\n// import { useRef } from 'react/cjs/react.production.min';\n\nimport { useState, useEffect } from \"react\";\nfunction useKeyPress(targetKey) {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState<boolean>(false);\n    // If pressed key is our target key then set to true\n    function downHandler({ key }) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n    // If released key is our target key then set to false\n    const upHandler = ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n    // Add event listeners\n    useEffect(() => {\n      window.addEventListener(\"keydown\", downHandler);\n      window.addEventListener(\"keyup\", upHandler);\n      // Remove event listeners on cleanup\n      return () => {\n        window.removeEventListener(\"keydown\", downHandler);\n        window.removeEventListener(\"keyup\", upHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n    return keyPressed;\n  }\n\nexport const Canvas = ({draw, width, height}) => {\n    const canvasRef =  React.useRef();\n    // const context = React.useState<CanvasRenderingContext2D | null>(null);\n    React.useEffect(() => {\n        const context = canvasRef.current.getContext(\"2d\");\n        draw(context, width, height);\n      });\n    sadPress = useKeyPress(\"s\");\n    return (\n      <div\n        style={{\n          textAlign: 'center',\n        }}>\n        <canvas\n          id=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          style={{\n            border: '2px solid #000',\n            marginTop: 10,\n          }}\n        ></canvas>\n      </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}