{"ast":null,"code":"var _jsxFileName = \"/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/game/game.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { Component } from 'react';\nimport { Canvas } from '../canvas/canvas.component';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useKeyPress(targetKey) {\n  _s();\n\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState < boolean > false; // If pressed key is our target key then set to true\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\n_s(useKeyPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport class Game extends Component {\n  constructor() {\n    super();\n    this.sadPress = useKeyPress(\"s\");\n\n    this.drawBall = (context, x, y) => {\n      context.fillStyle = \"white\";\n      context.fillRect(x, y, 20, 20);\n    };\n\n    this.drawPeddle = (context, x, y) => {\n      context.fillStyle = \"white\";\n      context.fillRect(x, y, 20, 80);\n    };\n\n    this.drawLine = (context, width, height) => {\n      context.strokeStyle = \"white\";\n      context.setLineDash([15, 5]);\n      context.moveTo(width / 2, 0);\n      context.lineTo(width / 2, height + 5);\n      context.stroke();\n    };\n\n    this.drawScore = (context, width, height) => {\n      context.font = \"100px Mina\";\n      context.fillStyle = \"white\";\n      context.fillText(this.state.score_player_1, width / 4, height / 4);\n      context.fillText(this.state.score_player_2, width * 3 / 4, height / 4);\n    };\n\n    this.draw = (context, width, height) => {\n      context.fillStyle = \"black\";\n      context.fillRect(0, 0, width, height);\n      context.beginPath();\n      this.drawBall(context, 200, 200);\n      this.drawLine(context, width, height);\n      this.drawPeddle(context, 10, 50);\n      this.drawPeddle(context, width - 30, 150);\n      this.drawScore(context, width, height);\n    };\n\n    this.state = {\n      score_player_1: 0,\n      score_player_2: 0,\n      player_1_position: 0\n    };\n  }\n\n  // componentWillMount() {\n  //     window.addEventListener('keydown', this.handleKeyboardInput.bind(this));\n  // }  \n  // handleKeyboardInput = (e) => {\n  //     const code = e.keyCode ? e.keyCode : e.which;\n  //     if (code === 38) { //up key\n  //         this.setState({ keyboardInput: {'Y', -1 }});\n  //     }\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.draw,\n        height: 500,\n        width: 900\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/art/Desktop/transcendence/transcendence/transcendence/src/components/game/game.component.jsx"],"names":["Component","Canvas","useState","useEffect","useKeyPress","targetKey","keyPressed","setKeyPressed","boolean","downHandler","key","upHandler","window","addEventListener","removeEventListener","Game","constructor","sadPress","drawBall","context","x","y","fillStyle","fillRect","drawPeddle","drawLine","width","height","strokeStyle","setLineDash","moveTo","lineTo","stroke","drawScore","font","fillText","state","score_player_1","score_player_2","draw","beginPath","player_1_position","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { Canvas } from '../canvas/canvas.component';\nimport { useState, useEffect } from \"react\";\n\nfunction useKeyPress(targetKey) {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState<boolean>(false);\n    // If pressed key is our target key then set to true\n    function downHandler({ key }) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n    // If released key is our target key then set to false\n    const upHandler = ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n    // Add event listeners\n    useEffect(() => {\n      window.addEventListener(\"keydown\", downHandler);\n      window.addEventListener(\"keyup\", upHandler);\n      // Remove event listeners on cleanup\n      return () => {\n        window.removeEventListener(\"keydown\", downHandler);\n        window.removeEventListener(\"keyup\", upHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n    return keyPressed;\n  }\n\nexport class Game extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n          score_player_1: 0,\n          score_player_2: 0,\n          player_1_position: 0\n        }\n\n    }\n    sadPress = useKeyPress(\"s\");\n    drawBall = (context, x, y) => {\n        context.fillStyle = \"white\";\n        context.fillRect(x, y, 20, 20);\n    }\n    drawPeddle = (context, x, y) => {\n        context.fillStyle = \"white\";\n        context.fillRect(x, y, 20,  80);\n    }\n    \n    drawLine = (context, width, height) => {\n    \n        context.strokeStyle = \"white\";\n        context.setLineDash([15, 5]);\n        context.moveTo(width / 2, 0);\n        context.lineTo(width / 2, height + 5);\n        context.stroke();  \n    }\n    \n    drawScore = (context, width, height) => {\n        context.font = \"100px Mina\";\n        context.fillStyle = \"white\";\n        context.fillText(this.state.score_player_1,  width / 4 , height / 4);\n        context.fillText(this.state.score_player_2,  width * 3 / 4 , height / 4);\n    }\n\n    draw = (context, width, height) => {\n    context.fillStyle = \"black\";\n    context.fillRect(0, 0, width,  height);\n    context.beginPath();\n    this.drawBall(context, 200, 200);\n    this.drawLine(context, width, height);\n    this.drawPeddle(context, 10, 50);\n    this.drawPeddle(context, width - 30, 150);\n    this.drawScore(context, width, height);\n\n    \n\n  };\n\n    // componentWillMount() {\n    //     window.addEventListener('keydown', this.handleKeyboardInput.bind(this));\n    // }  \n    // handleKeyboardInput = (e) => {\n    //     const code = e.keyCode ? e.keyCode : e.which;\n\n    //     if (code === 38) { //up key\n    //         this.setState({ keyboardInput: {'Y', -1 }});\n    //     }\n    // }\n    render()\n    {\n\n        return(\n            <div className='game'>\n                <h1>Game</h1>\n                <Canvas draw={this.draw} height={500} width={900} />\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}