{"ast":null,"code":"import { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, useLayoutEffect, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, deprecateDirectCall, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport * as React from 'react';\nimport { useContext, useMemo, useRef, useState } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction callProp(value, ...args) {\n  return is.fun(value) ? value(...args) : value;\n}\n\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\n\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : undefined;\n\nconst noopTransform = value => value;\n\nconst getDefaultProps = (props, transform = noopTransform) => {\n  let keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  const defaults = {};\n\n  for (const key of keys) {\n    const value = transform(props[key], key);\n\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n\n  return defaults;\n};\n\nconst DEFAULT_PROPS = ['config', 'onProps', 'onStart', 'onChange', 'onPause', 'onResume', 'onRest'];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n\n  if (to) {\n    const out = {\n      to\n    };\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n\n  return _extends({}, props);\n}\n\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nfunction hasProps(props) {\n  for (const _ in props) return true;\n\n  return false;\n}\n\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\n\nfunction detachRefs(ctrl, ref) {\n  var _ctrl$ref;\n\n  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\n\nfunction replaceRef(ctrl, ref) {\n  if (ref && ctrl.ref !== ref) {\n    var _ctrl$ref2;\n\n    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps, timeFrame = 1000) {\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              const memoizedDelayProp = props.delay;\n\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, ref => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], update => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nconst linear = t => t;\n\nconst defaults = _extends({}, config.default, {\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n});\n\nclass AnimationConfig {\n  constructor() {\n    this.tension = void 0;\n    this.friction = void 0;\n    this.frequency = void 0;\n    this.damping = void 0;\n    this.mass = void 0;\n    this.velocity = 0;\n    this.restVelocity = void 0;\n    this.precision = void 0;\n    this.progress = void 0;\n    this.duration = void 0;\n    this.easing = void 0;\n    this.clamp = void 0;\n    this.bounce = void 0;\n    this.decay = void 0;\n    this.round = void 0;\n    Object.assign(this, defaults);\n  }\n\n}\n\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = _extends({}, defaultConfig);\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = _extends({}, defaultConfig, newConfig);\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  let {\n    mass,\n    frequency,\n    damping\n  } = config;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n}\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = undefined;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = undefined;\n      config.decay = undefined;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = undefined;\n    }\n  }\n}\n\nconst emptyArray = [];\n\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.to = void 0;\n    this.from = void 0;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n\n}\n\nfunction scheduleProps(callId, {\n  key,\n  props,\n  defaultProps,\n  state,\n  actions\n}) {\n  return new Promise((resolve, reject) => {\n    var _props$cancel;\n\n    let delay;\n    let timeout;\n    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start(_extends({}, props, {\n          callId,\n          cancel\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some(result => result.cancelled) ? getCancelledResult(target.get()) : results.every(result => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(result => result.finished));\n\nconst getNoopResult = value => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false\n});\n\nconst getFinishedResult = (value, finished, cancelled = false) => ({\n  value,\n  finished,\n  cancelled\n});\n\nconst getCancelledResult = value => ({\n  value,\n  cancelled: true,\n  finished: false\n});\n\nfunction runAsync(to, props, state, target) {\n  const {\n    callId,\n    parentId,\n    onRest\n  } = props;\n  const {\n    asyncTo: prevTo,\n    promise: prevPromise\n  } = state;\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === 'onRest' ? undefined : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n\n    const bailIfEnded = bailSignal => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      const skipAnimationSignal = new SkipAniamtionSignal();\n      return (async () => {\n        if (Globals.skipAnimation) {\n          stopAsync(state);\n          skipAnimationSignal.result = getFinishedResult(target, false);\n          bail(skipAnimationSignal);\n          throw skipAnimationSignal;\n        }\n\n        bailIfEnded(bailSignal);\n        const props = is.obj(arg1) ? _extends({}, arg1) : _extends({}, arg2, {\n          to: arg1\n        });\n        props.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props[key])) {\n            props[key] = value;\n          }\n        });\n        const result = await target.start(props);\n        bailIfEnded(bailSignal);\n\n        if (state.paused) {\n          await new Promise(resume => {\n            state.resumeQueue.add(resume);\n          });\n        }\n\n        return result;\n      })();\n    };\n\n    let result;\n\n    if (Globals.skipAnimation) {\n      stopAsync(state);\n      return getFinishedResult(target, false);\n    }\n\n    try {\n      let animating;\n\n      if (is.arr(to)) {\n        animating = (async queue => {\n          for (const props of queue) {\n            await animate(props);\n          }\n        })(to);\n      } else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)));\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target.get(), true, false);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else if (err instanceof SkipAniamtionSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : undefined;\n        state.promise = parentId ? prevPromise : undefined;\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item);\n      });\n    }\n\n    return result;\n  })();\n}\n\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, t => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = undefined;\n  if (cancelId) state.cancelId = cancelId;\n}\n\nclass BailSignal extends Error {\n  constructor() {\n    super('An async animation has been interrupted. You see this error because you ' + 'forgot to use `await` or `.catch(...)` on its returned promise.');\n    this.result = void 0;\n  }\n\n}\n\nclass SkipAniamtionSignal extends Error {\n  constructor() {\n    super('SkipAnimationSignal');\n    this.result = void 0;\n  }\n\n}\n\nconst isFrameValue = value => value instanceof FrameValue;\n\nlet nextId$1 = 1;\n\nclass FrameValue extends FluidValue {\n  constructor(...args) {\n    super(...args);\n    this.id = nextId$1++;\n    this.key = void 0;\n    this._priority = 0;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n\n  to(...args) {\n    return Globals.to(this, args);\n  }\n\n  interpolate(...args) {\n    deprecateInterpolate();\n    return Globals.to(this, args);\n  }\n\n  toJSON() {\n    return this.get();\n  }\n\n  observerAdded(count) {\n    if (count == 1) this._attach();\n  }\n\n  observerRemoved(count) {\n    if (count == 0) this._detach();\n  }\n\n  _attach() {}\n\n  _detach() {}\n\n  _onChange(value, idle = false) {\n    callFluidObservers(this, {\n      type: 'change',\n      parent: this,\n      value,\n      idle\n    });\n  }\n\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n\n    callFluidObservers(this, {\n      type: 'priority',\n      parent: this,\n      priority\n    });\n  }\n\n}\n\nconst $P = Symbol.for('SpringPhase');\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\n\nconst hasAnimated = target => (target[$P] & HAS_ANIMATED) > 0;\n\nconst isAnimating = target => (target[$P] & IS_ANIMATING) > 0;\n\nconst isPaused = target => (target[$P] & IS_PAUSED) > 0;\n\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.key = void 0;\n    this.animation = new Animation();\n    this.queue = void 0;\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n    this._memoizedDuration = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? _extends({}, arg1) : _extends({}, arg2, {\n        from: arg1\n      });\n\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n\n      this.start(props);\n    }\n  }\n\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(node => node.lastVelocity || 0);\n  }\n\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n\n  get isAnimating() {\n    return isAnimating(this);\n  }\n\n  get isPaused() {\n    return isPaused(this);\n  }\n\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {\n      config,\n      toValues\n    } = anim;\n    const payload = getPayload(anim.to);\n\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n\n    anim.values.forEach((node, i) => {\n      if (node.done) return;\n      const to = node.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n\n      if (!finished) {\n        position = node.lastPosition;\n\n        if (config.tension <= 0) {\n          node.done = true;\n          return;\n        }\n\n        let elapsed = node.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node.v0 != null ? node.v0 : node.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n\n        if (!is.und(config.duration)) {\n          let p = 1;\n\n          if (config.duration > 0) {\n            if (this._memoizedDuration !== config.duration) {\n              this._memoizedDuration = config.duration;\n\n              if (node.durationProgress > 0) {\n                node.elapsedTime = config.duration * node.durationProgress;\n                elapsed = node.elapsedTime += dt;\n              }\n            }\n\n            p = (config.progress || 0) + elapsed / this._memoizedDuration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n            node.durationProgress = p;\n          }\n\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node.lastPosition - position) < 0.1;\n          velocity = v0 * e;\n        } else {\n          velocity = node.lastVelocity == null ? v0 : node.lastVelocity;\n          const precision = config.precision || (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001));\n          const restVelocity = config.restVelocity || precision / 10;\n          const bounceFactor = config.clamp ? 0 : config.bounce;\n          const canBounce = !is.und(bounceFactor);\n          const isGrowing = from == to ? node.v0 > 0 : from < to;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision;\n\n              if (finished) {\n                break;\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing;\n\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to;\n              }\n            }\n\n            const springForce = -config.tension * 0.000001 * (position - to);\n            const dampingForce = -config.friction * 0.001 * velocity;\n            const acceleration = (springForce + dampingForce) / config.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n\n        node.lastVelocity = velocity;\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n\n      if (finished) {\n        node.done = true;\n      } else {\n        idle = false;\n      }\n\n      if (node.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n    const currVal = node.getValue();\n\n    if (idle) {\n      const finalVal = getFluidValue(anim.to);\n\n      if ((currVal !== finalVal || changed) && !config.decay) {\n        node.setValue(finalVal);\n\n        this._onChange(finalVal);\n      } else if (changed && config.decay) {\n        this._onChange(currVal);\n      }\n\n      this._stop();\n    } else if (changed) {\n      this._onChange(currVal);\n    }\n  }\n\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n\n      this._focus(value);\n\n      this._set(value);\n    });\n    return this;\n  }\n\n  pause() {\n    this._update({\n      pause: true\n    });\n  }\n\n  resume() {\n    this._update({\n      pause: false\n    });\n  }\n\n  finish() {\n    if (isAnimating(this)) {\n      const {\n        to,\n        config\n      } = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n\n        if (!config.decay) {\n          this._set(to, false);\n        }\n\n        this._stop();\n      });\n    }\n\n    return this;\n  }\n\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n\n  start(to, arg2) {\n    let queue;\n\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : _extends({}, arg2, {\n        to\n      })];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n\n    return Promise.all(queue.map(props => this._update(props))).then(results => getCombinedResult(this, results));\n  }\n\n  stop(cancel) {\n    const {\n      to\n    } = this.animation;\n\n    this._focus(this.get());\n\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n\n  reset() {\n    this._update({\n      reset: true\n    });\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      this._start();\n    } else if (event.type == 'priority') {\n      this.priority = event.priority + 1;\n    }\n  }\n\n  _prepareNode(props) {\n    const key = this.key || '';\n    let {\n      to,\n      from\n    } = props;\n    to = is.obj(to) ? to[key] : to;\n\n    if (to == null || isAsyncTo(to)) {\n      to = undefined;\n    }\n\n    from = is.obj(from) ? from[key] : from;\n\n    if (from == null) {\n      from = undefined;\n    }\n\n    const range = {\n      to,\n      from\n    };\n\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to];\n      from = getFluidValue(from);\n\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n        this._set(to);\n      }\n    }\n\n    return range;\n  }\n\n  _update(_ref, isLoop) {\n    let props = _extends({}, _ref);\n\n    const {\n      key,\n      defaultProps\n    } = this;\n    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, 'onProps');\n    sendEvent(this, 'onProps', props, this);\n\n    const range = this._prepareNode(props);\n\n    if (Object.isFrozen(this)) {\n      throw Error('Cannot animate a `SpringValue` object that is frozen. ' + 'Did you forget to pass your component to `animated(...)` before animating its props?');\n    }\n\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, 'onPause', getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n\n            if (isAnimating(this)) {\n              this._resume();\n            }\n\n            flushCalls(state.resumeQueue);\n            sendEvent(this, 'onResume', getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n\n      return result;\n    });\n  }\n\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n\n    const {\n      key,\n      defaultProps,\n      animation: anim\n    } = this;\n    const {\n      to: prevTo,\n      from: prevFrom\n    } = anim;\n    let {\n      to = prevTo,\n      from = prevFrom\n    } = range;\n\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n\n    if (props.reverse) [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n\n    if (hasToChanged) {\n      this._focus(to);\n    }\n\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {\n      config\n    } = anim;\n    const {\n      decay,\n      velocity\n    } = config;\n\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n\n    let node = getAnimated(this);\n\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n\n      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n\n      if (started) {\n        const {\n          onRest\n        } = anim;\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n\n        this._pendingCalls.add(resolve);\n\n        if (anim.changed) raf.batchedUpdates(() => {\n          anim.changed = !reset;\n          onRest == null ? void 0 : onRest(result, this);\n\n          if (reset) {\n            callProp(defaultProps.onRest, result);\n          } else {\n            anim.onStart == null ? void 0 : anim.onStart(result, this);\n          }\n        });\n      }\n    }\n\n    if (reset) {\n      this._set(value);\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(value));\n    }\n  }\n\n  _focus(value) {\n    const anim = this.animation;\n\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n\n      anim.to = value;\n\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 0;\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n\n    this.priority = priority;\n  }\n\n  _detach() {\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n\n  _set(arg, idle = true) {\n    const value = getFluidValue(arg);\n\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n\n    return getAnimated(this);\n  }\n\n  _onStart() {\n    const anim = this.animation;\n\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, 'onStart', getFinishedResult(this, checkFinished(this, anim.to)), this);\n    }\n  }\n\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n\n      callProp(this.animation.onChange, value, this);\n    }\n\n    callProp(this.defaultProps.onChange, value, this);\n\n    super._onChange(value, idle);\n  }\n\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition);\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, node => {\n        node.done = true;\n      });\n\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = undefined;\n      }\n\n      callFluidObservers(this, {\n        type: 'idle',\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, 'onRest', result, this);\n      }\n    }\n  }\n\n}\n\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props, loop = props.loop, to = props.to) {\n  let loopRet = callProp(loop);\n\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate(_extends({}, props, {\n      loop,\n      default: false,\n      pause: undefined,\n      to: !reverse || isAsyncTo(to) ? to : undefined,\n      from: reset ? props.from : undefined,\n      reset\n    }, overrides));\n  }\n}\n\nfunction createUpdate(props) {\n  const {\n    to,\n    from\n  } = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to)) findDefined(to, keys);\n  if (is.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n\n  return update;\n}\n\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\n\nconst ACTIVE_EVENTS = ['onStart', 'onRest', 'onChange', 'onPause', 'onResume'];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : undefined;\n}\n\nfunction sendEvent(target, type, ...args) {\n  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;\n\n  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);\n  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);\n}\n\nconst BATCHED_EVENTS = ['onStart', 'onChange', 'onRest'];\nlet nextId = 1;\n\nclass Controller {\n  constructor(props, flush) {\n    this.id = nextId++;\n    this.springs = {};\n    this.queue = [];\n    this.ref = void 0;\n    this._flush = void 0;\n    this._initialProps = void 0;\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._item = void 0;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Map(),\n      onChange: new Map(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush) {\n      this._flush = flush;\n    }\n\n    if (props) {\n      this.start(_extends({\n        default: true\n      }, props));\n    }\n  }\n\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every(spring => spring.idle);\n  }\n\n  get item() {\n    return this._item;\n  }\n\n  set item(item) {\n    this._item = item;\n  }\n\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n\n    return this;\n  }\n\n  start(props) {\n    let {\n      queue\n    } = this;\n\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each(spring => spring.stop(!!arg));\n    }\n\n    return this;\n  }\n\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: true\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].pause());\n    }\n\n    return this;\n  }\n\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: false\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].resume());\n    }\n\n    return this;\n  }\n\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n\n  _onFrame() {\n    const {\n      onStart,\n      onChange,\n      onRest\n    } = this._events;\n    const active = this._active.size > 0;\n    const changed = this._changed.size > 0;\n\n    if (active && !this._started || changed && !this._started) {\n      this._started = true;\n      flush(onStart, ([onStart, result]) => {\n        result.value = this.get();\n        onStart(result, this, this._item);\n      });\n    }\n\n    const idle = !active && this._started;\n    const values = changed || idle && onRest.size ? this.get() : null;\n\n    if (changed && onChange.size) {\n      flush(onChange, ([onChange, result]) => {\n        result.value = values;\n        onChange(result, this, this._item);\n      });\n    }\n\n    if (idle) {\n      this._started = false;\n      flush(onRest, ([onRest, result]) => {\n        result.value = values;\n        onRest(result, this, this._item);\n      });\n    }\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      this._changed.add(event.parent);\n\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == 'idle') {\n      this._active.delete(event.parent);\n    } else return;\n\n    raf.onFrame(this._onFrame);\n  }\n\n}\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(results => getCombinedResult(ctrl, results));\n}\n\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {\n    keys,\n    to,\n    from,\n    loop,\n    onRest,\n    onResolve\n  } = props;\n  const defaults = is.obj(props.default) && props.default;\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  if (to === false) props.to = null;\n  if (from === false) props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : undefined;\n\n  if (asyncTo) {\n    props.to = undefined;\n    props.onRest = undefined;\n\n    if (defaults) {\n      defaults.onRest = undefined;\n    }\n  } else {\n    each(BATCHED_EVENTS, key => {\n      const handler = props[key];\n\n      if (is.fun(handler)) {\n        const queue = ctrl['_events'][key];\n\n        props[key] = ({\n          finished,\n          cancelled\n        }) => {\n          const result = queue.get(handler);\n\n          if (result) {\n            if (!finished) result.finished = false;\n            if (cancelled) result.cancelled = true;\n          } else {\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false\n            });\n          }\n        };\n\n        if (defaults) {\n          defaults[key] = props[key];\n        }\n      }\n    });\n  }\n\n  const state = ctrl['_state'];\n\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n\n  const promises = (keys || Object.keys(ctrl.springs)).map(key => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, 'cancel') === true;\n\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl['_lastAsyncId'], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n\n        start(props, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl['_lastAsyncId']);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props.onRest = onRest;\n            resolve(runAsync(asyncTo, props, state, ctrl));\n          }\n        }\n\n      }\n    }));\n  }\n\n  if (state.paused) {\n    await new Promise(resume => {\n      state.resumeQueue.add(resume);\n    });\n  }\n\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));\n  }\n\n  return result;\n}\n\nfunction getSprings(ctrl, props) {\n  const springs = _extends({}, ctrl.springs);\n\n  if (props) {\n    each(toArray(props), props => {\n      if (is.und(props.keys)) {\n        props = createUpdate(props);\n      }\n\n      if (!is.obj(props.to)) {\n        props = _extends({}, props, {\n          to: undefined\n        });\n      }\n\n      prepareSprings(springs, props, key => {\n        return createSpring(key);\n      });\n    });\n  }\n\n  setSprings(ctrl, springs);\n  return springs;\n}\n\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring['_prepareNode'](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst _excluded$3 = [\"children\"];\n\nconst SpringContext = _ref => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$3);\n\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause,\n        immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({\n    pause,\n    immediate\n  }), [pause, immediate]);\n  const {\n    Provider\n  } = ctx;\n  return React.createElement(Provider, {\n    value: props\n  }, children);\n};\n\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, React.createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nconst SpringRef = () => {\n  const current = [];\n\n  const SpringRef = function SpringRef(props) {\n    deprecateDirectCall();\n    const results = [];\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = _getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef.current = current;\n\n  SpringRef.add = function (ctrl) {\n    if (!current.includes(ctrl)) {\n      current.push(ctrl);\n    }\n  };\n\n  SpringRef.delete = function (ctrl) {\n    const i = current.indexOf(ctrl);\n    if (~i) current.splice(i, 1);\n  };\n\n  SpringRef.pause = function () {\n    each(current, ctrl => ctrl.pause(...arguments));\n    return this;\n  };\n\n  SpringRef.resume = function () {\n    each(current, ctrl => ctrl.resume(...arguments));\n    return this;\n  };\n\n  SpringRef.set = function (values) {\n    each(current, ctrl => ctrl.set(values));\n  };\n\n  SpringRef.start = function (props) {\n    const results = [];\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef.stop = function () {\n    each(current, ctrl => ctrl.stop(...arguments));\n    return this;\n  };\n\n  SpringRef.update = function (props) {\n    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  };\n\n  const _getProps = function _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  };\n\n  SpringRef._getProps = _getProps;\n  return SpringRef;\n};\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n\n    flush(ctrl, updates) {\n      const springs = getSprings(ctrl, updates);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs).some(key => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates) : new Promise(resolve => {\n        setSprings(ctrl, springs);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates));\n        });\n        forceUpdate();\n      });\n    }\n\n  }), []);\n  const ctrls = useRef([...state.ctrls]);\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  useMemo(() => {\n    each(ctrls.current.slice(length, prevLength), ctrl => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    ctrls.current.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n\n  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls.current;\n    const {\n      queue\n    } = state;\n\n    if (queue.length) {\n      state.queue = [];\n      each(queue, cb => cb());\n    }\n\n    each(ctrls.current, (ctrl, i) => {\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      const update = updates[i];\n\n      if (update) {\n        replaceRef(ctrl, update.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true));\n  });\n  const values = springs.map(x => _extends({}, x));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => SpringRef();\n\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent) ctrl.start({\n        to: parent.springs\n      });\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    ref['_getProps'] = (propsArg, ctrl, i) => {\n      const props = is.fun(propsArg) ? propsArg(i, ctrl) : propsArg;\n\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n}\n\nlet TransitionPhase;\n\n(function (TransitionPhase) {\n  TransitionPhase[\"MOUNT\"] = \"mount\";\n  TransitionPhase[\"ENTER\"] = \"enter\";\n  TransitionPhase[\"UPDATE\"] = \"update\";\n  TransitionPhase[\"LEAVE\"] = \"leave\";\n})(TransitionPhase || (TransitionPhase = {}));\n\nfunction useTransition(data, props, deps) {\n  const propsFn = is.fun(props) && props;\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    onDestroyed,\n    ref: propsRef,\n    config: propsConfig\n  } = propsFn ? propsFn() : props;\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, t => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, ({\n    ctrl,\n    item,\n    key\n  }) => {\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions) each(prevTransitions, (t, i) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: TransitionPhase.MOUNT,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n\n  if (reused.length) {\n    let i = -1;\n    const {\n      leave\n    } = propsFn ? propsFn() : props;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _extends({}, t, {\n          item: items[keyIndex]\n        });\n      } else if (leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    const p = propsFn ? propsFn() : props;\n    let to;\n    let phase;\n    let propsDelay = callProp(p.delay || 0, key);\n\n    if (prevPhase == TransitionPhase.MOUNT) {\n      to = p.enter;\n      phase = TransitionPhase.ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != TransitionPhase.LEAVE) {\n        if (isLeave) {\n          to = p.leave;\n          phase = TransitionPhase.LEAVE;\n        } else if (to = p.update) {\n          phase = TransitionPhase.UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = p.enter;\n        phase = TransitionPhase.ENTER;\n      } else return;\n    }\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to\n    };\n\n    if (!to.config) {\n      const config = propsConfig || defaultProps.config;\n      to.config = callProp(config, t.item, i, phase);\n    }\n\n    delay += trail;\n\n    const payload = _extends({}, defaultProps, {\n      delay: propsDelay + delay,\n      ref: propsRef,\n      immediate: p.immediate,\n      reset: false\n    }, to);\n\n    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {\n      const _p = propsFn ? propsFn() : props;\n\n      const from = is.und(_p.initial) || prevTransitions ? _p.from : _p.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    const {\n      onResolve\n    } = payload;\n\n    payload.onResolve = result => {\n      callProp(onResolve, result);\n      const transitions = usedTransitions.current;\n      const t = transitions.find(t => t.key === key);\n      if (!t) return;\n\n      if (result.cancelled && t.phase != TransitionPhase.UPDATE) {\n        return;\n      }\n\n      if (t.ctrl.idle) {\n        const idle = transitions.every(t => t.ctrl.idle);\n\n        if (t.phase == TransitionPhase.LEAVE) {\n          const expiry = callProp(expires, t.item);\n\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 0x7fffffff) t.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions.some(t => t.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase,\n      springs,\n      payload\n    });\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext) each(transitions, t => {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, ({\n      phase,\n      payload\n    }, t) => {\n      const {\n        ctrl\n      } = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext && phase == TransitionPhase.ENTER) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      if (payload) {\n        replaceRef(ctrl, payload.ref);\n\n        if (ctrl.ref) {\n          ctrl.update(payload);\n        } else {\n          ctrl.start(payload);\n        }\n      }\n    });\n  }, reset ? void 0 : deps);\n\n  const renderTransitions = render => React.createElement(React.Fragment, null, transitions.map((t, i) => {\n    const {\n      springs\n    } = changes.get(t) || t.ctrl;\n    const elem = render(_extends({}, springs), t.item, t, i);\n    return elem && elem.type ? React.createElement(elem.type, _extends({}, elem.props, {\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    })) : elem;\n  }));\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\n\nlet nextKey = 1;\n\nfunction getKeys(items, {\n  key,\n  keys = key\n}, prevTransitions) {\n  if (keys === null) {\n    const reused = new Set();\n    return items.map(item => {\n      const t = prevTransitions && prevTransitions.find(t => t.item === item && t.phase !== TransitionPhase.LEAVE && !reused.has(t));\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nconst _excluded$2 = [\"children\"];\n\nfunction Spring(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n\n  return children(useSpring(props));\n}\n\nconst _excluded$1 = [\"items\", \"children\"];\n\nfunction Trail(_ref) {\n  let {\n    items,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nconst _excluded = [\"items\", \"children\"];\n\nfunction Transition(_ref) {\n  let {\n    items,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.key = void 0;\n    this.idle = true;\n    this.calc = void 0;\n    this._active = new Set();\n    this.source = source;\n    this.calc = createInterpolator(...args);\n\n    const value = this._get();\n\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n\n  advance(_dt) {\n    const value = this._get();\n\n    const oldValue = this.get();\n\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n\n      this._onChange(value, this.idle);\n    }\n\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), node => {\n        node.done = false;\n      });\n\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n\n    this._start();\n  }\n\n  _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n\n    this._active.clear();\n\n    becomeIdle(this);\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n\n        this._start();\n      }\n    } else if (event.type == 'idle') {\n      this._active.delete(event.parent);\n    } else if (event.type == 'priority') {\n      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n\n}\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), node => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: 'idle',\n      parent: self\n    });\n  }\n}\n\nconst to = (source, ...args) => new Interpolation(source, args);\n\nconst interpolate = (source, ...args) => (deprecateInterpolate(), new Interpolation(source, args));\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };","map":{"version":3,"sources":["/Users/art/Desktop/transcendence/transcendence/transcendence/node_modules/@react-spring/core/dist/react-spring-core.esm.js"],"names":["eachProp","is","toArray","isAnimatedString","Globals","getFluidValue","useLayoutEffect","each","raf","flush","FluidValue","deprecateInterpolate","callFluidObservers","frameLoop","hasFluidValue","flushCalls","isEqual","getFluidObservers","addFluidObserver","removeFluidObserver","noop","useMemoOne","deprecateDirectCall","useForceUpdate","usePrev","useOnce","createInterpolator","createStringInterpolator","React","useContext","useMemo","useRef","useState","getAnimated","AnimatedValue","getPayload","AnimatedString","getAnimatedType","setAnimated","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","callProp","value","args","fun","matchProp","includes","resolveProp","prop","obj","getDefaultProp","props","default","undefined","noopTransform","getDefaultProps","transform","keys","DEFAULT_PROPS","defaults","und","RESERVED_PROPS","config","from","to","ref","loop","reset","pause","cancel","reverse","immediate","delay","onProps","onStart","onChange","onPause","onResume","onRest","onResolve","items","trail","sort","expires","initial","enter","update","leave","children","onDestroyed","callId","parentId","getForwardProps","forward","count","inferTo","out","val","computeGoal","arr","map","range","output","hasProps","_","isAsyncTo","detachRefs","ctrl","_ctrl$ref","delete","replaceRef","_ctrl$ref2","add","useChain","refs","timeSteps","timeFrame","prevDelay","controllers","current","isNaN","queue","memoizedDelayProp","start","p","Promise","resolve","queues","q","then","push","tension","friction","gentle","wobbly","stiff","slow","molasses","linear","t","mass","damping","easing","clamp","AnimationConfig","constructor","frequency","velocity","restVelocity","precision","progress","duration","bounce","decay","round","mergeConfig","newConfig","defaultConfig","sanitizeConfig","Math","pow","PI","isTensionConfig","emptyArray","Animation","changed","values","toValues","fromValues","scheduleProps","defaultProps","state","actions","reject","_props$cancel","timeout","paused","resumeQueue","resume","timeouts","time","now","setTimeout","pauseQueue","cancelId","err","getCombinedResult","results","some","result","cancelled","getCancelledResult","get","every","getNoopResult","getFinishedResult","finished","runAsync","asyncTo","prevTo","promise","prevPromise","asyncId","preventBail","bail","bailPromise","bailIfEnded","bailSignal","bailResult","animate","arg1","arg2","BailSignal","skipAnimationSignal","SkipAniamtionSignal","skipAnimation","stopAsync","animating","stop","bind","all","batchedUpdates","item","clear","Error","isFrameValue","FrameValue","nextId$1","id","_priority","priority","_onPriorityChange","node","getValue","interpolate","toJSON","observerAdded","_attach","observerRemoved","_detach","_onChange","idle","type","parent","$P","Symbol","for","HAS_ANIMATED","IS_ANIMATING","IS_PAUSED","hasAnimated","isAnimating","isPaused","setActiveBit","active","setPausedBit","SpringValue","animation","_state","Set","_pendingCalls","_lastCallId","_lastToId","_memoizedDuration","goal","lastVelocity","advance","dt","anim","payload","forEach","done","lastPosition","position","elapsed","elapsedTime","v0","durationProgress","e","exp","abs","min","bounceFactor","canBounce","isGrowing","isMoving","isBouncing","step","numSteps","ceil","n","springForce","dampingForce","acceleration","Number","console","warn","setValue","currVal","finalVal","_stop","set","_focus","_set","_update","finish","_onStart","eventObserved","event","_start","_prepareNode","_ref","isLoop","test","mergeActiveFn","sendEvent","isFrozen","checkFinished","_resume","_merge","nextProps","createLoopUpdate","hasToProp","hasFromProp","prevFrom","hasFromChanged","hasToChanged","hasAsyncTo","isAnimatable","num","nodeType","name","goalType","started","hasValueChanged","ACTIVE_EVENTS","arg","oldNode","create","loopRet","overrides","createUpdate","findDefined","size","Array","declareUpdate","_target$animation$typ","_target$animation","_target$defaultProps$","_target$defaultProps","BATCHED_EVENTS","nextId","Controller","springs","_flush","_initialProps","_lastAsyncId","_active","_changed","_started","_item","_events","Map","_onFrame","spring","prepareKeys","flushUpdateQueue","iterator","onFrame","flushUpdate","handler","promises","getSprings","prepareSprings","createSpring","setSprings","observer","_objectWithoutPropertiesLoose","excluded","sourceKeys","indexOf","_excluded$3","SpringContext","inherited","ctx","Provider","createElement","makeContext","Consumer","init","createContext","_context","SpringRef","_getProps","splice","index","useSprings","deps","propsFn","layoutId","forceUpdate","ctrls","updates","canFlushSync","prevLength","slice","declareUpdates","startIndex","endIndex","context","prevContext","hasContext","cb","x","useSpring","isFn","initSpringRef","useSpringRef","useTrail","propsArg","TransitionPhase","useTransition","data","propsRef","propsConfig","transitions","usedTransitions","prevTransitions","expired","clearTimeout","expirationId","getKeys","reused","phase","MOUNT","keyIndex","prevIndex","a","b","changes","prevPhase","propsDelay","ENTER","isLeave","LEAVE","UPDATE","_p","find","expiry","expiryMs","renderTransitions","render","Fragment","elem","str","nextKey","has","_excluded$2","Spring","_excluded$1","Trail","trails","_excluded","Transition","Interpolation","calc","_get","_dt","oldValue","checkIdle","becomeIdle","inputs","max","reduce","highest","isIdle","self"],"mappings":"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","sourcesContent":["import { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, useLayoutEffect, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, deprecateDirectCall, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport * as React from 'react';\nimport { useContext, useMemo, useRef, useState } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction callProp(value, ...args) {\n  return is.fun(value) ? value(...args) : value;\n}\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : undefined;\n\nconst noopTransform = value => value;\n\nconst getDefaultProps = (props, transform = noopTransform) => {\n  let keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  const defaults = {};\n\n  for (const key of keys) {\n    const value = transform(props[key], key);\n\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n\n  return defaults;\n};\nconst DEFAULT_PROPS = ['config', 'onProps', 'onStart', 'onChange', 'onPause', 'onResume', 'onRest'];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n\n  if (to) {\n    const out = {\n      to\n    };\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n\n  return _extends({}, props);\n}\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\nfunction hasProps(props) {\n  for (const _ in props) return true;\n\n  return false;\n}\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\nfunction detachRefs(ctrl, ref) {\n  var _ctrl$ref;\n\n  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n  if (ref && ctrl.ref !== ref) {\n    var _ctrl$ref2;\n\n    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps, timeFrame = 1000) {\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              const memoizedDelayProp = props.delay;\n\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, ref => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], update => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nconst linear = t => t;\n\nconst defaults = _extends({}, config.default, {\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n});\n\nclass AnimationConfig {\n  constructor() {\n    this.tension = void 0;\n    this.friction = void 0;\n    this.frequency = void 0;\n    this.damping = void 0;\n    this.mass = void 0;\n    this.velocity = 0;\n    this.restVelocity = void 0;\n    this.precision = void 0;\n    this.progress = void 0;\n    this.duration = void 0;\n    this.easing = void 0;\n    this.clamp = void 0;\n    this.bounce = void 0;\n    this.decay = void 0;\n    this.round = void 0;\n    Object.assign(this, defaults);\n  }\n\n}\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = _extends({}, defaultConfig);\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = _extends({}, defaultConfig, newConfig);\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  let {\n    mass,\n    frequency,\n    damping\n  } = config;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n}\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = undefined;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = undefined;\n      config.decay = undefined;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = undefined;\n    }\n  }\n}\n\nconst emptyArray = [];\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.to = void 0;\n    this.from = void 0;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n\n}\n\nfunction scheduleProps(callId, {\n  key,\n  props,\n  defaultProps,\n  state,\n  actions\n}) {\n  return new Promise((resolve, reject) => {\n    var _props$cancel;\n\n    let delay;\n    let timeout;\n    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start(_extends({}, props, {\n          callId,\n          cancel\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some(result => result.cancelled) ? getCancelledResult(target.get()) : results.every(result => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(result => result.finished));\nconst getNoopResult = value => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false\n});\nconst getFinishedResult = (value, finished, cancelled = false) => ({\n  value,\n  finished,\n  cancelled\n});\nconst getCancelledResult = value => ({\n  value,\n  cancelled: true,\n  finished: false\n});\n\nfunction runAsync(to, props, state, target) {\n  const {\n    callId,\n    parentId,\n    onRest\n  } = props;\n  const {\n    asyncTo: prevTo,\n    promise: prevPromise\n  } = state;\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === 'onRest' ? undefined : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n\n    const bailIfEnded = bailSignal => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      const skipAnimationSignal = new SkipAniamtionSignal();\n      return (async () => {\n        if (Globals.skipAnimation) {\n          stopAsync(state);\n          skipAnimationSignal.result = getFinishedResult(target, false);\n          bail(skipAnimationSignal);\n          throw skipAnimationSignal;\n        }\n\n        bailIfEnded(bailSignal);\n        const props = is.obj(arg1) ? _extends({}, arg1) : _extends({}, arg2, {\n          to: arg1\n        });\n        props.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props[key])) {\n            props[key] = value;\n          }\n        });\n        const result = await target.start(props);\n        bailIfEnded(bailSignal);\n\n        if (state.paused) {\n          await new Promise(resume => {\n            state.resumeQueue.add(resume);\n          });\n        }\n\n        return result;\n      })();\n    };\n\n    let result;\n\n    if (Globals.skipAnimation) {\n      stopAsync(state);\n      return getFinishedResult(target, false);\n    }\n\n    try {\n      let animating;\n\n      if (is.arr(to)) {\n        animating = (async queue => {\n          for (const props of queue) {\n            await animate(props);\n          }\n        })(to);\n      } else {\n          animating = Promise.resolve(to(animate, target.stop.bind(target)));\n        }\n\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target.get(), true, false);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else if (err instanceof SkipAniamtionSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : undefined;\n        state.promise = parentId ? prevPromise : undefined;\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item);\n      });\n    }\n\n    return result;\n  })();\n}\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, t => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = undefined;\n  if (cancelId) state.cancelId = cancelId;\n}\nclass BailSignal extends Error {\n  constructor() {\n    super('An async animation has been interrupted. You see this error because you ' + 'forgot to use `await` or `.catch(...)` on its returned promise.');\n    this.result = void 0;\n  }\n\n}\nclass SkipAniamtionSignal extends Error {\n  constructor() {\n    super('SkipAnimationSignal');\n    this.result = void 0;\n  }\n\n}\n\nconst isFrameValue = value => value instanceof FrameValue;\nlet nextId$1 = 1;\nclass FrameValue extends FluidValue {\n  constructor(...args) {\n    super(...args);\n    this.id = nextId$1++;\n    this.key = void 0;\n    this._priority = 0;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n\n  to(...args) {\n    return Globals.to(this, args);\n  }\n\n  interpolate(...args) {\n    deprecateInterpolate();\n    return Globals.to(this, args);\n  }\n\n  toJSON() {\n    return this.get();\n  }\n\n  observerAdded(count) {\n    if (count == 1) this._attach();\n  }\n\n  observerRemoved(count) {\n    if (count == 0) this._detach();\n  }\n\n  _attach() {}\n\n  _detach() {}\n\n  _onChange(value, idle = false) {\n    callFluidObservers(this, {\n      type: 'change',\n      parent: this,\n      value,\n      idle\n    });\n  }\n\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n\n    callFluidObservers(this, {\n      type: 'priority',\n      parent: this,\n      priority\n    });\n  }\n\n}\n\nconst $P = Symbol.for('SpringPhase');\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\nconst hasAnimated = target => (target[$P] & HAS_ANIMATED) > 0;\nconst isAnimating = target => (target[$P] & IS_ANIMATING) > 0;\nconst isPaused = target => (target[$P] & IS_PAUSED) > 0;\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.key = void 0;\n    this.animation = new Animation();\n    this.queue = void 0;\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n    this._memoizedDuration = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? _extends({}, arg1) : _extends({}, arg2, {\n        from: arg1\n      });\n\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n\n      this.start(props);\n    }\n  }\n\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(node => node.lastVelocity || 0);\n  }\n\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n\n  get isAnimating() {\n    return isAnimating(this);\n  }\n\n  get isPaused() {\n    return isPaused(this);\n  }\n\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {\n      config,\n      toValues\n    } = anim;\n    const payload = getPayload(anim.to);\n\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n\n    anim.values.forEach((node, i) => {\n      if (node.done) return;\n      const to = node.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n\n      if (!finished) {\n        position = node.lastPosition;\n\n        if (config.tension <= 0) {\n          node.done = true;\n          return;\n        }\n\n        let elapsed = node.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node.v0 != null ? node.v0 : node.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n\n        if (!is.und(config.duration)) {\n          let p = 1;\n\n          if (config.duration > 0) {\n            if (this._memoizedDuration !== config.duration) {\n              this._memoizedDuration = config.duration;\n\n              if (node.durationProgress > 0) {\n                node.elapsedTime = config.duration * node.durationProgress;\n                elapsed = node.elapsedTime += dt;\n              }\n            }\n\n            p = (config.progress || 0) + elapsed / this._memoizedDuration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n            node.durationProgress = p;\n          }\n\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n            const decay = config.decay === true ? 0.998 : config.decay;\n            const e = Math.exp(-(1 - decay) * elapsed);\n            position = from + v0 / (1 - decay) * (1 - e);\n            finished = Math.abs(node.lastPosition - position) < 0.1;\n            velocity = v0 * e;\n          } else {\n              velocity = node.lastVelocity == null ? v0 : node.lastVelocity;\n              const precision = config.precision || (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001));\n              const restVelocity = config.restVelocity || precision / 10;\n              const bounceFactor = config.clamp ? 0 : config.bounce;\n              const canBounce = !is.und(bounceFactor);\n              const isGrowing = from == to ? node.v0 > 0 : from < to;\n              let isMoving;\n              let isBouncing = false;\n              const step = 1;\n              const numSteps = Math.ceil(dt / step);\n\n              for (let n = 0; n < numSteps; ++n) {\n                isMoving = Math.abs(velocity) > restVelocity;\n\n                if (!isMoving) {\n                  finished = Math.abs(to - position) <= precision;\n\n                  if (finished) {\n                    break;\n                  }\n                }\n\n                if (canBounce) {\n                  isBouncing = position == to || position > to == isGrowing;\n\n                  if (isBouncing) {\n                    velocity = -velocity * bounceFactor;\n                    position = to;\n                  }\n                }\n\n                const springForce = -config.tension * 0.000001 * (position - to);\n                const dampingForce = -config.friction * 0.001 * velocity;\n                const acceleration = (springForce + dampingForce) / config.mass;\n                velocity = velocity + acceleration * step;\n                position = position + velocity * step;\n              }\n            }\n\n        node.lastVelocity = velocity;\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n\n      if (finished) {\n        node.done = true;\n      } else {\n        idle = false;\n      }\n\n      if (node.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n    const currVal = node.getValue();\n\n    if (idle) {\n      const finalVal = getFluidValue(anim.to);\n\n      if ((currVal !== finalVal || changed) && !config.decay) {\n        node.setValue(finalVal);\n\n        this._onChange(finalVal);\n      } else if (changed && config.decay) {\n        this._onChange(currVal);\n      }\n\n      this._stop();\n    } else if (changed) {\n      this._onChange(currVal);\n    }\n  }\n\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n\n      this._focus(value);\n\n      this._set(value);\n    });\n    return this;\n  }\n\n  pause() {\n    this._update({\n      pause: true\n    });\n  }\n\n  resume() {\n    this._update({\n      pause: false\n    });\n  }\n\n  finish() {\n    if (isAnimating(this)) {\n      const {\n        to,\n        config\n      } = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n\n        if (!config.decay) {\n          this._set(to, false);\n        }\n\n        this._stop();\n      });\n    }\n\n    return this;\n  }\n\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n\n  start(to, arg2) {\n    let queue;\n\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : _extends({}, arg2, {\n        to\n      })];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n\n    return Promise.all(queue.map(props => this._update(props))).then(results => getCombinedResult(this, results));\n  }\n\n  stop(cancel) {\n    const {\n      to\n    } = this.animation;\n\n    this._focus(this.get());\n\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n\n  reset() {\n    this._update({\n      reset: true\n    });\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      this._start();\n    } else if (event.type == 'priority') {\n      this.priority = event.priority + 1;\n    }\n  }\n\n  _prepareNode(props) {\n    const key = this.key || '';\n    let {\n      to,\n      from\n    } = props;\n    to = is.obj(to) ? to[key] : to;\n\n    if (to == null || isAsyncTo(to)) {\n      to = undefined;\n    }\n\n    from = is.obj(from) ? from[key] : from;\n\n    if (from == null) {\n      from = undefined;\n    }\n\n    const range = {\n      to,\n      from\n    };\n\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to];\n      from = getFluidValue(from);\n\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n          this._set(to);\n        }\n    }\n\n    return range;\n  }\n\n  _update(_ref, isLoop) {\n    let props = _extends({}, _ref);\n\n    const {\n      key,\n      defaultProps\n    } = this;\n    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, 'onProps');\n    sendEvent(this, 'onProps', props, this);\n\n    const range = this._prepareNode(props);\n\n    if (Object.isFrozen(this)) {\n      throw Error('Cannot animate a `SpringValue` object that is frozen. ' + 'Did you forget to pass your component to `animated(...)` before animating its props?');\n    }\n\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, 'onPause', getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n\n            if (isAnimating(this)) {\n              this._resume();\n            }\n\n            flushCalls(state.resumeQueue);\n            sendEvent(this, 'onResume', getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n\n      return result;\n    });\n  }\n\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n\n    const {\n      key,\n      defaultProps,\n      animation: anim\n    } = this;\n    const {\n      to: prevTo,\n      from: prevFrom\n    } = anim;\n    let {\n      to = prevTo,\n      from = prevFrom\n    } = range;\n\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n\n    if (props.reverse) [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n\n    if (hasToChanged) {\n      this._focus(to);\n    }\n\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {\n      config\n    } = anim;\n    const {\n      decay,\n      velocity\n    } = config;\n\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n\n    let node = getAnimated(this);\n\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n\n      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n          this._stop(prevTo);\n        }\n    }\n\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n\n      if (started) {\n        const {\n          onRest\n        } = anim;\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n\n        this._pendingCalls.add(resolve);\n\n        if (anim.changed) raf.batchedUpdates(() => {\n          anim.changed = !reset;\n          onRest == null ? void 0 : onRest(result, this);\n\n          if (reset) {\n            callProp(defaultProps.onRest, result);\n          } else {\n              anim.onStart == null ? void 0 : anim.onStart(result, this);\n            }\n        });\n      }\n    }\n\n    if (reset) {\n      this._set(value);\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n        this._start();\n      } else if (isAnimating(this) && !hasToChanged) {\n          this._pendingCalls.add(resolve);\n        } else {\n            resolve(getNoopResult(value));\n          }\n  }\n\n  _focus(value) {\n    const anim = this.animation;\n\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n\n      anim.to = value;\n\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 0;\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n\n    this.priority = priority;\n  }\n\n  _detach() {\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n\n  _set(arg, idle = true) {\n    const value = getFluidValue(arg);\n\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n\n    return getAnimated(this);\n  }\n\n  _onStart() {\n    const anim = this.animation;\n\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, 'onStart', getFinishedResult(this, checkFinished(this, anim.to)), this);\n    }\n  }\n\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n\n      callProp(this.animation.onChange, value, this);\n    }\n\n    callProp(this.defaultProps.onChange, value, this);\n\n    super._onChange(value, idle);\n  }\n\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition);\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, node => {\n        node.done = true;\n      });\n\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = undefined;\n      }\n\n      callFluidObservers(this, {\n        type: 'idle',\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, 'onRest', result, this);\n      }\n    }\n  }\n\n}\n\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props, loop = props.loop, to = props.to) {\n  let loopRet = callProp(loop);\n\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate(_extends({}, props, {\n      loop,\n      default: false,\n      pause: undefined,\n      to: !reverse || isAsyncTo(to) ? to : undefined,\n      from: reset ? props.from : undefined,\n      reset\n    }, overrides));\n  }\n}\nfunction createUpdate(props) {\n  const {\n    to,\n    from\n  } = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to)) findDefined(to, keys);\n  if (is.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n\n  return update;\n}\n\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\n\nconst ACTIVE_EVENTS = ['onStart', 'onRest', 'onChange', 'onPause', 'onResume'];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : undefined;\n}\n\nfunction sendEvent(target, type, ...args) {\n  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;\n\n  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);\n  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);\n}\n\nconst BATCHED_EVENTS = ['onStart', 'onChange', 'onRest'];\nlet nextId = 1;\nclass Controller {\n  constructor(props, flush) {\n    this.id = nextId++;\n    this.springs = {};\n    this.queue = [];\n    this.ref = void 0;\n    this._flush = void 0;\n    this._initialProps = void 0;\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._item = void 0;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Map(),\n      onChange: new Map(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush) {\n      this._flush = flush;\n    }\n\n    if (props) {\n      this.start(_extends({\n        default: true\n      }, props));\n    }\n  }\n\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every(spring => spring.idle);\n  }\n\n  get item() {\n    return this._item;\n  }\n\n  set item(item) {\n    this._item = item;\n  }\n\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n\n    return this;\n  }\n\n  start(props) {\n    let {\n      queue\n    } = this;\n\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each(spring => spring.stop(!!arg));\n    }\n\n    return this;\n  }\n\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: true\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].pause());\n    }\n\n    return this;\n  }\n\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: false\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].resume());\n    }\n\n    return this;\n  }\n\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n\n  _onFrame() {\n    const {\n      onStart,\n      onChange,\n      onRest\n    } = this._events;\n    const active = this._active.size > 0;\n    const changed = this._changed.size > 0;\n\n    if (active && !this._started || changed && !this._started) {\n      this._started = true;\n      flush(onStart, ([onStart, result]) => {\n        result.value = this.get();\n        onStart(result, this, this._item);\n      });\n    }\n\n    const idle = !active && this._started;\n    const values = changed || idle && onRest.size ? this.get() : null;\n\n    if (changed && onChange.size) {\n      flush(onChange, ([onChange, result]) => {\n        result.value = values;\n        onChange(result, this, this._item);\n      });\n    }\n\n    if (idle) {\n      this._started = false;\n      flush(onRest, ([onRest, result]) => {\n        result.value = values;\n        onRest(result, this, this._item);\n      });\n    }\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      this._changed.add(event.parent);\n\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == 'idle') {\n      this._active.delete(event.parent);\n    } else return;\n\n    raf.onFrame(this._onFrame);\n  }\n\n}\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(results => getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {\n    keys,\n    to,\n    from,\n    loop,\n    onRest,\n    onResolve\n  } = props;\n  const defaults = is.obj(props.default) && props.default;\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  if (to === false) props.to = null;\n  if (from === false) props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : undefined;\n\n  if (asyncTo) {\n    props.to = undefined;\n    props.onRest = undefined;\n\n    if (defaults) {\n      defaults.onRest = undefined;\n    }\n  } else {\n      each(BATCHED_EVENTS, key => {\n        const handler = props[key];\n\n        if (is.fun(handler)) {\n          const queue = ctrl['_events'][key];\n\n          props[key] = ({\n            finished,\n            cancelled\n          }) => {\n            const result = queue.get(handler);\n\n            if (result) {\n              if (!finished) result.finished = false;\n              if (cancelled) result.cancelled = true;\n            } else {\n              queue.set(handler, {\n                value: null,\n                finished: finished || false,\n                cancelled: cancelled || false\n              });\n            }\n          };\n\n          if (defaults) {\n            defaults[key] = props[key];\n          }\n        }\n      });\n    }\n\n  const state = ctrl['_state'];\n\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n      props.pause = true;\n    }\n\n  const promises = (keys || Object.keys(ctrl.springs)).map(key => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, 'cancel') === true;\n\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl['_lastAsyncId'], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n\n        start(props, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl['_lastAsyncId']);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props.onRest = onRest;\n            resolve(runAsync(asyncTo, props, state, ctrl));\n          }\n        }\n\n      }\n    }));\n  }\n\n  if (state.paused) {\n    await new Promise(resume => {\n      state.resumeQueue.add(resume);\n    });\n  }\n\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));\n  }\n\n  return result;\n}\nfunction getSprings(ctrl, props) {\n  const springs = _extends({}, ctrl.springs);\n\n  if (props) {\n    each(toArray(props), props => {\n      if (is.und(props.keys)) {\n        props = createUpdate(props);\n      }\n\n      if (!is.obj(props.to)) {\n        props = _extends({}, props, {\n          to: undefined\n        });\n      }\n\n      prepareSprings(springs, props, key => {\n        return createSpring(key);\n      });\n    });\n  }\n\n  setSprings(ctrl, springs);\n  return springs;\n}\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring['_prepareNode'](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst _excluded$3 = [\"children\"];\nconst SpringContext = _ref => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$3);\n\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause,\n        immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({\n    pause,\n    immediate\n  }), [pause, immediate]);\n  const {\n    Provider\n  } = ctx;\n  return React.createElement(Provider, {\n    value: props\n  }, children);\n};\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, React.createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nconst SpringRef = () => {\n  const current = [];\n\n  const SpringRef = function SpringRef(props) {\n    deprecateDirectCall();\n    const results = [];\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = _getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef.current = current;\n\n  SpringRef.add = function (ctrl) {\n    if (!current.includes(ctrl)) {\n      current.push(ctrl);\n    }\n  };\n\n  SpringRef.delete = function (ctrl) {\n    const i = current.indexOf(ctrl);\n    if (~i) current.splice(i, 1);\n  };\n\n  SpringRef.pause = function () {\n    each(current, ctrl => ctrl.pause(...arguments));\n    return this;\n  };\n\n  SpringRef.resume = function () {\n    each(current, ctrl => ctrl.resume(...arguments));\n    return this;\n  };\n\n  SpringRef.set = function (values) {\n    each(current, ctrl => ctrl.set(values));\n  };\n\n  SpringRef.start = function (props) {\n    const results = [];\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef.stop = function () {\n    each(current, ctrl => ctrl.stop(...arguments));\n    return this;\n  };\n\n  SpringRef.update = function (props) {\n    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  };\n\n  const _getProps = function _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  };\n\n  SpringRef._getProps = _getProps;\n  return SpringRef;\n};\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n\n    flush(ctrl, updates) {\n      const springs = getSprings(ctrl, updates);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs).some(key => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates) : new Promise(resolve => {\n        setSprings(ctrl, springs);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates));\n        });\n        forceUpdate();\n      });\n    }\n\n  }), []);\n  const ctrls = useRef([...state.ctrls]);\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  useMemo(() => {\n    each(ctrls.current.slice(length, prevLength), ctrl => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    ctrls.current.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n\n  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls.current;\n    const {\n      queue\n    } = state;\n\n    if (queue.length) {\n      state.queue = [];\n      each(queue, cb => cb());\n    }\n\n    each(ctrls.current, (ctrl, i) => {\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      const update = updates[i];\n\n      if (update) {\n        replaceRef(ctrl, update.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true));\n  });\n  const values = springs.map(x => _extends({}, x));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => SpringRef();\n\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent) ctrl.start({\n        to: parent.springs\n      });\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    ref['_getProps'] = (propsArg, ctrl, i) => {\n      const props = is.fun(propsArg) ? propsArg(i, ctrl) : propsArg;\n\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n}\n\nlet TransitionPhase;\n\n(function (TransitionPhase) {\n  TransitionPhase[\"MOUNT\"] = \"mount\";\n  TransitionPhase[\"ENTER\"] = \"enter\";\n  TransitionPhase[\"UPDATE\"] = \"update\";\n  TransitionPhase[\"LEAVE\"] = \"leave\";\n})(TransitionPhase || (TransitionPhase = {}));\n\nfunction useTransition(data, props, deps) {\n  const propsFn = is.fun(props) && props;\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    onDestroyed,\n    ref: propsRef,\n    config: propsConfig\n  } = propsFn ? propsFn() : props;\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, t => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, ({\n    ctrl,\n    item,\n    key\n  }) => {\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions) each(prevTransitions, (t, i) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: TransitionPhase.MOUNT,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n\n  if (reused.length) {\n    let i = -1;\n    const {\n      leave\n    } = propsFn ? propsFn() : props;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _extends({}, t, {\n          item: items[keyIndex]\n        });\n      } else if (leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    const p = propsFn ? propsFn() : props;\n    let to;\n    let phase;\n    let propsDelay = callProp(p.delay || 0, key);\n\n    if (prevPhase == TransitionPhase.MOUNT) {\n      to = p.enter;\n      phase = TransitionPhase.ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != TransitionPhase.LEAVE) {\n        if (isLeave) {\n          to = p.leave;\n          phase = TransitionPhase.LEAVE;\n        } else if (to = p.update) {\n          phase = TransitionPhase.UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = p.enter;\n        phase = TransitionPhase.ENTER;\n      } else return;\n    }\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to\n    };\n\n    if (!to.config) {\n      const config = propsConfig || defaultProps.config;\n      to.config = callProp(config, t.item, i, phase);\n    }\n\n    delay += trail;\n\n    const payload = _extends({}, defaultProps, {\n      delay: propsDelay + delay,\n      ref: propsRef,\n      immediate: p.immediate,\n      reset: false\n    }, to);\n\n    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {\n      const _p = propsFn ? propsFn() : props;\n\n      const from = is.und(_p.initial) || prevTransitions ? _p.from : _p.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    const {\n      onResolve\n    } = payload;\n\n    payload.onResolve = result => {\n      callProp(onResolve, result);\n      const transitions = usedTransitions.current;\n      const t = transitions.find(t => t.key === key);\n      if (!t) return;\n\n      if (result.cancelled && t.phase != TransitionPhase.UPDATE) {\n        return;\n      }\n\n      if (t.ctrl.idle) {\n        const idle = transitions.every(t => t.ctrl.idle);\n\n        if (t.phase == TransitionPhase.LEAVE) {\n          const expiry = callProp(expires, t.item);\n\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 0x7fffffff) t.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions.some(t => t.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase,\n      springs,\n      payload\n    });\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext) each(transitions, t => {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, ({\n      phase,\n      payload\n    }, t) => {\n      const {\n        ctrl\n      } = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext && phase == TransitionPhase.ENTER) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      if (payload) {\n        replaceRef(ctrl, payload.ref);\n\n        if (ctrl.ref) {\n          ctrl.update(payload);\n        } else {\n          ctrl.start(payload);\n        }\n      }\n    });\n  }, reset ? void 0 : deps);\n\n  const renderTransitions = render => React.createElement(React.Fragment, null, transitions.map((t, i) => {\n    const {\n      springs\n    } = changes.get(t) || t.ctrl;\n    const elem = render(_extends({}, springs), t.item, t, i);\n    return elem && elem.type ? React.createElement(elem.type, _extends({}, elem.props, {\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    })) : elem;\n  }));\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\nlet nextKey = 1;\n\nfunction getKeys(items, {\n  key,\n  keys = key\n}, prevTransitions) {\n  if (keys === null) {\n    const reused = new Set();\n    return items.map(item => {\n      const t = prevTransitions && prevTransitions.find(t => t.item === item && t.phase !== TransitionPhase.LEAVE && !reused.has(t));\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nconst _excluded$2 = [\"children\"];\nfunction Spring(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n\n  return children(useSpring(props));\n}\n\nconst _excluded$1 = [\"items\", \"children\"];\nfunction Trail(_ref) {\n  let {\n    items,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nconst _excluded = [\"items\", \"children\"];\nfunction Transition(_ref) {\n  let {\n    items,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.key = void 0;\n    this.idle = true;\n    this.calc = void 0;\n    this._active = new Set();\n    this.source = source;\n    this.calc = createInterpolator(...args);\n\n    const value = this._get();\n\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n\n  advance(_dt) {\n    const value = this._get();\n\n    const oldValue = this.get();\n\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n\n      this._onChange(value, this.idle);\n    }\n\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), node => {\n        node.done = false;\n      });\n\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n\n    this._start();\n  }\n\n  _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n\n    this._active.clear();\n\n    becomeIdle(this);\n  }\n\n  eventObserved(event) {\n    if (event.type == 'change') {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n\n        this._start();\n      }\n    } else if (event.type == 'idle') {\n        this._active.delete(event.parent);\n      } else if (event.type == 'priority') {\n          this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n        }\n  }\n\n}\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), node => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: 'idle',\n      parent: self\n    });\n  }\n}\n\nconst to = (source, ...args) => new Interpolation(source, args);\nconst interpolate = (source, ...args) => (deprecateInterpolate(), new Interpolation(source, args));\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\n\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };\n"]},"metadata":{},"sourceType":"module"}